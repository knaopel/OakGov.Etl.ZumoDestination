<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnableToLoadMappingFile_UnableToDeserializeFile" xml:space="preserve">
    <value>Could not load mapping file: {0}</value>
  </data>
  <data name="FailureGetMetadataTableByCommand" xml:space="preserve">
    <value>Failed to retrieve column properties by executing SELECT statement with schema only option from the database. The problem is {0}. However, this does not mean everything has failed. The next attempt is to try to get schema table by querying connection.</value>
  </data>
  <data name="InputName" xml:space="preserve">
    <value>ADO NET Destination Input</value>
  </data>
  <data name="ColunsizeDescriptorInvalid" xml:space="preserve">
    <value>MaximumLength descriptor in the descriptor file on path {0} is invalid. The schema table does not contain a column with the name {1}.</value>
  </data>
  <data name="NumericaScaleInvalid" xml:space="preserve">
    <value>NumericScale descriptor in the descriptor file on path {0} is invalid. The schema table does not contain a column with the name {1}.</value>
  </data>
  <data name="UnableToLoadMappingFile_UnableToCreateSerializer" xml:space="preserve">
    <value>Could not create XML serializer for type "{0}": {1}</value>
  </data>
  <data name="FailureConvertTable" xml:space="preserve">
    <value>Failed to convert the schema table obtained by querying the connection to a standard format.</value>
  </data>
  <data name="UnableToLoadMappingFile_UnableToCreateFileStreamForOpen" xml:space="preserve">
    <value>Could not initialize file reader for reading the file: {0}</value>
  </data>
  <data name="ComponentName" xml:space="preserve">
    <value>ADO NET Destination</value>
  </data>
  <data name="TableName" xml:space="preserve">
    <value>Table or view</value>
  </data>
  <data name="ComponentDisplayName" xml:space="preserve">
    <value>ADO NET Destination</value>
  </data>
  <data name="DiagnosticPost" xml:space="preserve">
    <value>ExternalRequest_post: '{0}'. The external request has completed."</value>
  </data>
  <data name="SelectReturnEmptyTable" xml:space="preserve">
    <value>The provider returned an empty schema table.</value>
  </data>
  <data name="ErrorOutputName" xml:space="preserve">
    <value>ADO NET Destination Error Output</value>
  </data>
  <data name="ConnectionDescription" xml:space="preserve">
    <value>Managed connection manager</value>
  </data>
  <data name="UnableToLoadProviderInfos_UnableToDeserializeFile" xml:space="preserve">
    <value>Could not load the file with provider descriptors: {0}.</value>
  </data>
  <data name="TableNameDescription" xml:space="preserve">
    <value>The Destination database table name.</value>
  </data>
  <data name="FailureToLoadSchema" xml:space="preserve">
    <value>The descriptor files on path {0} does not contain schema information for connection of type {1}. </value>
  </data>
  <data name="UnableToLoadMappingFile_UnableToCreateValidatingReader" xml:space="preserve">
    <value>Could not initialize an XML validating file reader: {0}</value>
  </data>
  <data name="CommandTimeoutDescription" xml:space="preserve">
    <value>The number of seconds before a command times out. A value of 0 indicates infinite time-out. </value>
  </data>
  <data name="UnableToLoadProviderInfos_DirectoryDoesntExist" xml:space="preserve">
    <value>Could not load provider specific information because the specified directory "{0}" does not exist.</value>
  </data>
  <data name="TypeAssemblyInfo" xml:space="preserve">
    <value>Type and Assembly information: '{0}'.</value>
  </data>
  <data name="UnableToLoadProviderInfos_FileMissing" xml:space="preserve">
    <value>Could not load provider specific information because the following file is not available: {0}.</value>
  </data>
  <data name="ReadTimeoutDescription" xml:space="preserve">
    <value>Specifies the number of milliseconds before the component times out.</value>
  </data>
  <data name="ComponentDescription" xml:space="preserve">
    <value>Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination.</value>
  </data>
  <data name="DiagnosticPre" xml:space="preserve">
    <value>ExternalRequest_pre: The object is ready to make the following external request: '{0}'.</value>
  </data>
  <data name="FailureGetMetadataTableByConnection" xml:space="preserve">
    <value>Failed to retrieve column properties by querying the connection. The problem is {0}.</value>
  </data>
  <data name="UnableToLoadMappingFile_UnableToReadSchema" xml:space="preserve">
    <value>Could not read XML schema to verify file correctness: {0}</value>
  </data>
  <data name="BatchSizeDescription" xml:space="preserve">
    <value>Specify the number of rows per batch. The default is 0 which uses the same size as SSIS internal buffer. </value>
  </data>
  <data name="DatatypeDescriptorInvalid" xml:space="preserve">
    <value>DataType descriptor in the descriptor file on path {0} is invalid. The schema table does not contain a column with the name {1}.</value>
  </data>
  <data name="ConnectionReturnedNullSchema" xml:space="preserve">
    <value>No column information is found for table {1} by querying {0}.</value>
  </data>
  <data name="NumericPrecisionDescriptorInvalid" xml:space="preserve">
    <value>NumericPrecision descriptor in the descriptor file on path {0} is invalid. The schema table does not contain a column with the name {1}.</value>
  </data>
  <data name="ContactInfo2" xml:space="preserve">
    <value>Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;</value>
  </data>
  <data name="ContactInfo1" xml:space="preserve">
    <value>;Microsoft Corporation; Microsoft SQL Server;</value>
  </data>
  <data name="ColumnnameDescriptorInvalid" xml:space="preserve">
    <value>ColumnName descriptor in the descriptor file on path {0} is invalid. The schema table does not contain a column with the name {1}.</value>
  </data>
  <data name="UseBulkInsertDescription" xml:space="preserve">
    <value>Specifies whether to use the SqlBulkCopy interface to improve the performance of bulk insert operations. Only certain providers support this interface.</value>
  </data>
  <data name="NewString" xml:space="preserve">
    <value>My New String</value>
  </data>
</root>